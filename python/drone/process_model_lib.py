import numpy as np
from casadi import *

'''
Library of process models collected over time. Some models are built using CasADi 

- hex_simple(X,par)
- WilliamsOtto(x,t,Fb,Tr,Fa,k01,k02,k03)
- WilliamsOtto1MV(x,t,Fb,Fa,k01,k02,k03)
- WilliamsOtto2reaction(x,t,Fb,Tr,Fa,k01,k02)
- GasLift(par,Ts)
- ReactorABC(par,Ts)
- HExODEcell(par,Ts)
- GasLift(par,Ts)

Written by Dinesh Krishnamoorthy
'''

def quadcopter(Ts,m = 1.846, l = 0.505, beta = 0.2):
    
    x = MX.sym('x',12)  # 12 states
    u = MX.sym('u',4) # 4 inputs - thrust forces generated by the four motors
    
    # Target 
    xsp = MX.sym('xsp')
    ysp = MX.sym('ysp')
    zsp = MX.sym('zsp')
    d = vertcat(xsp,ysp,zsp)

    Ixx = Iyy = 0.1722 # elements of the diagonal Inertia matrix
    Izz = 0.3424
    F = u[0]#+u[1]+u[2]+u[3] # Total thrust force

    dx1 = x[6]  # angular velocity \dot\theta
    dx2 = x[7]  # angular velocity \dot\phi
    dx3 = x[8]  # angular velocity \dot\psi
    dx4 = x[9]  # velocity \dot\x
    dx5 = x[10] # velocity \dot\y
    dx6 = x[11] # velocity \dot\z
    dx7 = u[1]#(u[1]-u[3])*l/Ixx  # torque \tau_\theta
    dx8 = u[2]#(u[2]-u[0])*l/Iyy  # torque \tau_\phi
    dx9 = u[3]#(-u[0]+u[1]-u[2]+u[3])*l/Izz  # torque \tau_\psi
    dx10 = (-F*sin(x[0]) - beta*x[9])/m
    dx11 = (F*cos(x[0])*sin(x[1]) - beta*x[10])/m
    dx12 = -9.81 + (F*cos(x[0])*cos(x[1]) - beta*x[11])/m

    dx = vertcat(dx1,dx2,dx3,dx4,dx5,dx6,dx7,dx8,dx9,dx10,dx11,dx12)
    
    L =  10*(x[3] - xsp)**2 + 10*(x[4] - ysp)**2 + 10*(x[5] - zsp)**2 + sumsqr(x[0:3]) + sumsqr(x[6:12])
        
    # create CVODES integrator
    ode = {'x':x,'p':vertcat(u,d),'ode':dx,'quad':L}
    opts = {'tf':Ts}
    F = integrator('F','cvodes',ode,opts) 

    f = Function('f',[x,vertcat(u,d)],[dx,L],['x','p'],['xdot','qj'])
        
    sys = {'x':x,'u':u,'d':d,'dx':dx,'L':L,'f':f}
    return sys,F


def hex_simple(X,par):
    '''
    - Simple Parallel heat exchanger model with two Heat exchangers
    - Steady-state model
    - JÃ¤schke, J. and Skogestad, S., 2014. Optimal operation of heat exchanger networks with stream split: Only temperature measurements are required. Computers & chemical engineering, 70, pp.35-49.
    '''
    u = X[:,0].reshape(-1,1)
    T0 = X[:,1].reshape(-1,1)
    
    Th1 = par.Th1
    Th2 = par.Th2 
    w0 = par.w0 
    wh1 = par.wh1 
    wh2 = par.wh2
    UA1 = par.UA1 
    UA2 = par.UA2

    T1 = T0 + (Th1-T0)/(1/2+u*w0*(1/(2*wh1)+1/UA1))
    T2 = T0 + (Th2-T0)/(1/2+(1-u)*w0*(1/(2*wh2)+1/UA2))
    
    T = u*T1 + (1-u)*T2

    Th1e = Th1 - u*w0/wh1*(T1 - T0)
    Th2e = Th2 - (1-u)*w0/wh2*(T2 - T0)
    
    meas = np.array([T0,T1,Th1,T2,Th2,Th1e,Th2e,T])
    return meas

def WilliamsOtto(x,t,Fb,Tr,Fa,k01 = 1.6599e6,k02 = 7.2117e8,k03 = 2.6745e12):
    '''
    - Benchmark Williams-Otto reactor model
    - ODE model
    - Williams, T.J. and Otto, R.E., 1960. A generalized chemical processing model for the investigation of computer control. Transactions of the American Institute of Electrical Engineers, Part I: Communication and Electronics, 79(5), pp.458-473.
    
    6 states - xa, xb, xc, xp, xe, xg
    2 inputs - Fb, Tr
    1 disturbance - Fa
    3 parameters - k01, k02, k03
    '''
    xa,xb,xc,xp,xe,xg = x

    B1 = 6666.7
    B2 = 8333.3
    B3 = 11111
    
    Vr = 2103
    
    k1 = k01*np.exp(-B1/(Tr))
    k2 = k02*np.exp(-B2/(Tr))
    k3 = k03*np.exp(-B3/(Tr))

    dxa = (Fa - (Fa+Fb)*xa - Vr*xa*xb*k1)/Vr
    dxb = (Fb - (Fa+Fb)*xb - Vr*xa*xb*k1 - Vr*xb*xc*k2)/Vr
    dxc = -(Fa+Fb)*xc/Vr + 2*xa*xb*k1 - 2*xb*xc*k2 - xc*xp*k3
    dxp = -(Fa+Fb)*xp/Vr + xb*xc*k2 - 0.5*xp*xc*k3
    dxe = -(Fa+Fb)*xe/Vr + 2*xb*xc*k2
    dxg = -(Fa+Fb)*xg/Vr + 1.5*xp*xc*k3
    
    dx = [dxa,dxb,dxc,dxp,dxe,dxg]
    return dx

def WilliamsOtto1MV(x,t,Fb,Fa,k01 = 1.6599e6,k02 = 7.2117e8,k03 = 2.6745e12):
    '''
    - Benchmark Williams-Otto reactor model with xG control using Tr
    - ODE model
    - Krishnamoorthy, D. and Skogestad, S., 2020. Linear Combination of Gradients as Optimal Controlled Variables, Computer-Aided Chemical Engineering, (ESCPAE 30).
    
    7 states - xa, xb, xc, xp, xe, xg, Tr
    1 inputs - Fb
    1 disturbance - Fa
    3 parameters - k01, k02, k03
    '''
    xa,xb,xc,xp,xe,xg,Tr = x

    B1 = 6666.7
    B2 = 8333.3
    B3 = 11111
    
    Vr = 2105
    
    # PI loop to control xG = 0.08 
    CC_tau1 = 150;
    CC_tauC = 150;
    CC_Kp = CC_tau1/(0.00517*CC_tauC);
    CC_xG_sp = 0.08

    k1 = k01*np.exp(-B1/(Tr))
    k2 = k02*np.exp(-B2/(Tr))
    k3 = k03*np.exp(-B3/(Tr))

    dxa = (Fa - (Fa+Fb)*xa - Vr*xa*xb*k1)/Vr
    dxb = (Fb - (Fa+Fb)*xb - Vr*xa*xb*k1 - Vr*xb*xc*k2)/Vr
    dxc = -(Fa+Fb)*xc/Vr + 2*xa*xb*k1 - 2*xb*xc*k2 - xc*xp*k3
    dxp = -(Fa+Fb)*xp/Vr + xb*xc*k2 - 0.5*xp*xc*k3
    dxe = -(Fa+Fb)*xe/Vr + 2*xb*xc*k2
    dxg = -(Fa+Fb)*xg/Vr + 1.5*xp*xc*k3
    dTr = -CC_Kp*dxg + CC_Kp/CC_tau1*(CC_xG_sp-xg);
    
    dx = [dxa,dxb,dxc,dxp,dxe,dxg,dTr]
    return dx


def WilliamsOtto2reaction(x,t,Fb,Tr,Fa,k01 = 1.655e8,k02 = 2.611e13):
    '''
    - Williams-Otto reactor model with only 2 reactions (component C unmodelled)
    - ODE model
    - Zhang, Y. and Forbes, J.F., 2000. Extended design cost: a performance criterion for real-time optimization systems. Comput & Chem Eng, 24(8), pp.1829-1841.

    
    5 states - xa, xb, xp, xe, xg
    2 inputs - Fb, Tr
    1 disturbance - Fa
    2 parameters - k01, k02
    '''
    xa,xb,xp,xe,xg = x
    
    Vr = 2105
    B1 = 8077.6; # degK
    B2 = 12438.5;

    k1 = k01*exp(-B1/Tr);
    k2 = k02*exp(-B2/Tr);

    dxa = (Fa - (Fa+Fb)*xa - Vr*xa*xb^2*k1 - Vr*xa*xb*xp*k2)/Vr;
    dxb = (Fb - (Fa+Fb)*xb - 2*Vr*xa*xb^2*k1 - Vr*xb*xb*xp*k2)/Vr;
    dxp = -(Fa+Fb)*xp/Vr + xa*xb^2*k1 - xa*xb*xp*k2;
    dxe = -(Fa+Fb)*xe/Vr + 2*xa*xb^2*k2;
    dxg = -(Fa+Fb)*xg/Vr + 3*xa*xb*xp*k2;
    
    dx = [dxa,dxb,dxp,dxe,dxg]
    return dx

def WilliamsOtto_casadi(par,Ts=1):
    '''
    - Benchmark Williams-Otto reactor model
    - ODE model
    - Williams, T.J. and Otto, R.E., 1960. A generalized chemical processing model for the investigation of computer control. Transactions of the American Institute of Electrical Engineers, Part I: Communication and Electronics, 79(5), pp.458-473.
    
    6 states - xa, xb, xc, xp, xe, xg
    2 inputs - Fb, Tr
    1 disturbance - Fa
    3 parameters - k01, k02, k03
    '''
    xa = MX.sym('xa')
    xb = MX.sym('xb')
    xc = MX.sym('xc')
    xp = MX.sym('xp')
    xe = MX.sym('xe')
    xg = MX.sym('xg')
    
    Fa = MX.sym('Fa')
    Fb = MX.sym('Fb')
    Tr = MX.sym('Tr')
    
    k01 = par['k01']
    k02 = par['k02']
    k03 = par['k03']
    B1 = par['B1']
    B2 = par['B2']
    B3 = par['B3']
    Vr = par['Vr']
    
    k1 = k01*np.exp(-B1/(Tr))
    k2 = k02*np.exp(-B2/(Tr))
    k3 = k03*np.exp(-B3/(Tr))

    dxa = (Fa - (Fa+Fb)*xa - Vr*xa*xb*k1)/Vr
    dxb = (Fb - (Fa+Fb)*xb - Vr*xa*xb*k1 - Vr*xb*xc*k2)/Vr
    dxc = -(Fa+Fb)*xc/Vr + 2*xa*xb*k1 - 2*xb*xc*k2 - xc*xp*k3
    dxp = -(Fa+Fb)*xp/Vr + xb*xc*k2 - 0.5*xp*xc*k3
    dxe = -(Fa+Fb)*xe/Vr + 2*xb*xc*k2
    dxg = -(Fa+Fb)*xg/Vr + 1.5*xp*xc*k3
    
    diff = vertcat(dxa,dxb,dxc,dxp,dxe,dxg)
    x_var = vertcat(xa,xb,xc,xp,xe,xg)
    p_var = vertcat(Fb)
    d_var = vertcat(Fa,Tr)
    
    L = -(1043.38*xp*(Fa+Fb)+20.92*xe*(Fa+Fb) - 79.23*Fa - 118.34*Fb)
    
    # create CVODES integrator
    ode = {'x':x_var,'p':vertcat(p_var,d_var),'ode':diff,'quad':L}
    opts = {'tf':Ts}
    F = integrator('F','cvodes',ode,opts) 

    f = Function('f',[x_var,vertcat(p_var,d_var)],[diff,L],['x','p'],['xdot','qj'])
    
    sys = {'x':x_var,'u':p_var,'d':d_var,'dx':diff,'L':L,'f':f}
    
    return sys,F

