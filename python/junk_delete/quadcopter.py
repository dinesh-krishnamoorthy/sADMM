import numpy as np
from casadi import *


def quad_dyn(Ts,m = 1.846, l = 0.505, beta = 0.2):
    
    x = MX.sym('x',12)  # 12 states
    u = MX.sym('u',4) # 4 inputs - thrust forces generated by the four motors
    
    # Target 
    xsp = MX.sym('xsp')
    ysp = MX.sym('ysp')
    zsp = MX.sym('zsp')

    Ixx = Iyy = 0.1722 # elements of the diagonal Inertia matrix
    Izz = 0.3424
    F = u[0]+u[1]+u[2]+u[3] # Total thrust force

    dx1 = x[6]  # angular velocity \dot\theta
    dx2 = x[7]  # angular velocity \dot\phi
    dx3 = x[8]  # angular velocity \dot\psi
    dx4 = x[9]  # velocity \dot\x
    dx5 = x[10] # velocity \dot\y
    dx6 = x[11] # velocity \dot\z
    dx7 = (u[1]-u[3])*l/Ixx  # torque \tau_\theta
    dx8 = (u[2]-u[0])*l/Iyy  # torque \tau_\phi
    dx9 = (-u[0]+u[1]-u[2]+u[3])*l/Izz  # torque \tau_\psi
    dx10 = (-F*sin(x[0]) - beta*x[9])/m
    dx11 = (F*cos(x[0])*sin(x[1]) - beta*x[10])/m
    dx12 = -9.81 + (F*cos(x[0])*cos(x[1]) - beta*x[11])/m

    diff = vertcat(dx1,dx2,dx3,dx4,dx5,dx6,dx7,dx8,dx9,dx10,dx11,dx12)
    d = vertcat(xsp,ysp,zsp)

    L =  (x[3] - xsp)**2 + (x[4] - ysp)**2 + (x[5] - zsp)**2 
        
    # create CVODES integrator
    ode = {'x':x,'p':vertcat(u,d),'ode':diff,'quad':L}
    opts = {'tf':Ts}
    F = integrator('F','cvodes',ode,opts) 

    f = Function('f',[x,vertcat(u,d)],[diff,L],['x','p'],['xdot','qj'])
        
    sys = {'x':x,'u':u,'d':d,'dx':diff,'L':L,'f':f}
    return sys,F

